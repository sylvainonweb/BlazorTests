@inherits EditablePageComponentBase
@page "/contact/add"
@page "/contact/edit/{IdAsString}"
@using BlazorTests.Shared
@using BlazorTests.Data
@using BlazorTests.Core
@using  System.ComponentModel.DataAnnotations
@inject BlazorTests.Services.ContactService ContactService
@inject BlazorTests.Services.ReferenceService ReferenceService

<EditablePageComponentWrapper Title="@Title" SaveAction="@(() => Save())" CancelAction="@(() => Cancel())">


    <EditForm Model="@this" OnValidSubmit="@(() => Save())">
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Nom :</label>
                    <InputText Class="col-md-4 col-12" @bind-Value="@LastName" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Prénom :</label>
                    <InputText Class="col-md-4 col-12" @bind-Value="@FirstName" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Civilité :</label>
                    @*Pas de cadre rouge autour du controle en cas d'erreur*@
                    <select class="col-md-4 col-12 custom-select" @bind="@CivilityId">
                        <option value=null></option>
                        @foreach (var civility in Civilities)
                        {
                            <option value=@civility.Id>@civility.Text</option>
                        }
                    </select>

                    @*Passe tout debout lors de la validation des champs obligatoires*@
                    @*<InputSelect class="col-md-4 col-12 custom-select" @bind-Value="@CivilityId">
                            <option value=""></option>
                            @foreach (var civility in Civilities)
                            {
                                <option value="@civility.Id">@civility.Text</option>
                            }
                        </InputSelect>*@
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Date de naissance :</label>
                    <InputDate class="col-md-4 col-12" @bind-Value="@BirthDate" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Marié :</label>
                    <InputCheckbox class="col-auto" @bind-Value="@Married" />
                </div>
            </div>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>

    @code {

        // La validation des champs obligatoires ne peut pas se faire sur les entités directement car :
        // * l'id est obligatoire mais on ne peut pas placer un attribut Required (alors qu'il est obligatoire) sur ce champ car il est généré
        // * Si l'entitié est renseignée via 2 écrans, il faut 1 "modèle" par écran, chaque modèle ayant les attributs correspondant aux champs obligatoires de l'écran.
        // Du coup, il me semble mieux de reproduire la même chose qu'en WPF à savoir des propriétés propres à l'écran
        [Required()]
        [Display(Name = "Nom")]
        //[RequiredEx("Nom")]
        public string LastName { get; set; }
        [RequiredEx("Prénom")]
        public string FirstName { get; set; }
        [RequiredEx("Civilité")]
        //[Required()]
        //[Display(Name = "Civilité")]
        public int? CivilityId { get; set; }
        [RequiredEx("Date de naissance")]
        public DateTime? BirthDate { get; set; }
        [RequiredEx("Marrié")]
        public bool Married { get; set; }

        IList<CivilityEntity> Civilities { get; set; }

        protected override async Task OnInitAsync()
        {
            this.Civilities = await ReferenceService.GetCivilityEntities();

            if (this.Id.HasValue == false)
            {
                this.Title = "Nouveau contact";
            }
            else
            {
                this.Title = "Modifier un contact";
                var contactEntity = await ContactService.GetContactEntity(this.Id.Value);
                this.LastName = contactEntity.LastName;
                this.FirstName = contactEntity.FirstName;
                this.CivilityId = contactEntity.CivilityId;
                this.BirthDate = contactEntity.BirthDate;
                this.Married = contactEntity.Married;
            }
        }

        protected override async Task OnSave()
        {
            var contactEntity = new ContactEntity();
            contactEntity.LastName = this.LastName;
            contactEntity.FirstName = this.FirstName;
            contactEntity.CivilityId = this.CivilityId;
            contactEntity.BirthDate = this.BirthDate;
            contactEntity.Married = this.Married;

            if (this.Id.HasValue == false)
            {
                await ContactService.AddContact(contactEntity);
                this.Id = contactEntity.Id;
            }
            else
            {
                contactEntity.Id = this.Id.Value;
                await ContactService.UpdateContact(contactEntity);
            }

            // On redirige vers la vue complète d'un contact
            UriHelper.NavigateTo(Urls.ContactEditFull + Id);
        }

        protected override async Task OnCancel()
        {
            await ReturnToCallerPage();
        }
    }

</EditablePageComponentWrapper>