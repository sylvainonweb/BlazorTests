@using MatBlazor
@using System.ComponentModel.DataAnnotations
@inject BlazorTests.Services.JsInteropService JsInteropService
@inject BlazorTests.Services.ReferenceService ReferenceService
@inject BlazorTests.Services.ContactService ContactService



<EditForm Model="@this" OnValidSubmit="@(() => Save())">

    <div class="row">
        <div class="col-2">
            TextBox :
        </div>
        <div class="col-auto">
            <MatTextField @bind-Value="@TextBox_Text" Label="Standard"></MatTextField>
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            DropDownList :
        </div>
        <div class="col-auto">
            <MatSelect Label="DropDownList" @bind-Value="@DropDownList_Id">
            <MatOption TValue="int" Value="-1"></MatOption>
            @foreach (var activity in @Activities)
            {
                <MatOption TValue="int" Value=@activity.Id>@activity.Text</MatOption>
            }
        </MatSelect>
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            DatePicker (Date) :
        </div>
        <div class="col-auto">
            <MatDatePicker Label="Date" @bind-Value="@DatePicker_Date"></MatDatePicker>
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            DatePicker (Time) :
        </div>
        <div class="col-auto">
            <MatDatePicker Label="Time" @bind-Value="@DatePicker_Time" EnableTime=true DateFormat="H:i" NoCalendar=true></MatDatePicker>
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            DatePicker (DateTime) :
        </div>
        <div class="col-auto">
            <MatDatePicker Label="DateTime" @bind-Value="@DatePicker_DateTime" EnableTime=true DateFormat="Y-m-d H:i"></MatDatePicker>
        </div>
    </div>

    @*<div class="row">
        <div class="col-2">
            NumericTextBox (Entier) :
        </div>
        <div class="col-auto">
            <MatNumericUpDownField Label="Entier" @bind-Value=@NumericTextBox_Int Step="1" DecimalPlaces="0" Type="int?" ></MatNumericUpDownField>
        </div>
    </div>*@

    <div class="row">
        <div class="col-2">
            NumericTextBox (Décimal) :
        </div>
        <div class="col-auto">
            <MatNumericUpDownField Label="Décimal" @bind-Value=@NumericTextBox_Decimal Step="0.01m" DecimalPlaces=2></MatNumericUpDownField>
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            Checkbox :
        </div>
        <div class="col-auto">
            <MatCheckbox Label="Checkbox" Indeterminate="true" TValue="bool?" @bind-Value="@CheckBox_Checked">Actif</MatCheckbox>
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            RadioButton (Actif) :
        </div>
        <div class="col-auto">
            <MatRadioGroup @bind-Value="@RadioButton_Value" Items="@(Enum.GetValues(typeof(Sex)).Cast<Sex>())">
            </MatRadioGroup>
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            ListBox :
        </div>
        <div class="col-auto">
            <MatList @bind-Value="@ListBox_Value">
                <MatListItem></MatListItem>
                @foreach (var activity in Activities)
                {
                    <MatListItem Id="@activity.Id.ToString()">
                        @activity.Text
                    </MatListItem>
                }
            </MatList>
        </div>
    </div>

    <div class="row">
        <div class="col-auto">
            <MatButton type="submit">Sauvegarder</MatButton>
            <MatButton type="button" @onclick="@Cancel">Annuler</MatButton>
        </div>
    </div>

    <div class="row">
        <div class="col-auto">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </div>
    </div>

</EditForm>

@code {
    [Required]
    public string TextBox_Text { get; set; }

    [Required]
    public int DropDownList_Id { get; set; }

    [Required]
    public DateTime? DatePicker_Date { get; set; }

    [Required]
    public DateTime? DatePicker_Time { get; set; }

    [Required]
    public DateTime? DatePicker_DateTime { get; set; }

    //[Required]
    //public int? NumericTextBox_Int { get; set; }

    [Required]
    public decimal? NumericTextBox_Decimal { get; set; }

    [Required]
    public bool? CheckBox_Checked { get; set; }

    [Required]
    public Sex RadioButton_Value { get; set; }

    //[Required]
    public string ListBox_Value { get; set; }


    public IList<ActivityEntity> Activities { get; set; }
    public IList<Contact> Contacts { get; set; }


    protected override async Task OnInitializedAsync()
    {
        this.Activities = await ReferenceService.GetActivityEntities();
    }

    public Task Save()
    {
        return JsInteropService.ShowAlert("Sauvegarde effectuée");
    }

    public void Cancel()
    {
        this.TextBox_Text = null;
        this.DropDownList_Id = 1;
        this.DatePicker_Date = null;
        this.DatePicker_Time = null;
        this.DatePicker_DateTime = null;
        //this.NumericTextBox_Int = null;
        this.NumericTextBox_Decimal = null;
        this.CheckBox_Checked = false;
        this.RadioButton_Value = Sex.Male;
        this.ListBox_Value = null;
    }

    public enum Sex
    {
        None,
        Male,
        Female,
        Other
    }
}
