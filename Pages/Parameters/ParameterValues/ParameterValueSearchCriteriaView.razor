@inherits ComponentBaseEx
@using BlazorTests.Core
@using BlazorTests.Core.Converters
@inject BlazorTests.Services.ParameterService ParameterService

<div class="row">
    <div class="col-md-6 col-12">
        <div class="form-group row">

            <!-- Le filtre Paramètre -->
            <div class="col-3">Paramètre :</div>
            <div class="col-8">
                <select class="custom-select" @bind=@ParameterId>
                    <option value=null></option>
                    @foreach (var parameter in Parameters)
                    {
                        <option value=@parameter.Id>@parameter.Text</option>
                    }
                </select>
            </div>
            <NavLink href="/parameter/list">
                <span class="fa fa-pen"></span>
            </NavLink>
        </div>

        <div class="form-group row">
            <!-- Le filtre Date de début -->
            <div class="col-3">Début :</div>
            <div class="col-9">
                <input type="date" @bind="@StartDate" @bind:format="yyyy-MM-dd" />
            </div>
        </div>

        <div class="form-group row">
            <!-- Le filtre Date de fin -->
            <div class="col-3">Fin :</div>
            <div class="col-9">
                <input type="date" @bind="@EndDate" @bind:format="yyyy-MM-dd" />
            </div>
        </div>
    </div>

    <div class="col-md-6 col-12">
        <div class="form-group row">
            <!-- Le bouton Rechercher -->
            <div class="col-auto">
                <button @onclick="@Search" class="btn btn-primary">Rechercher</button>
            </div>
            <!-- Le bouton Réinitialiser -->
            <div class="col-auto">
                <button @onclick="@ResetFilters" class="btn btn-primary">Réinitialiser</button>
            </div>
        </div>
    </div>
</div>

@code {

    public IList<BlazorTests.Data.Parameter> Parameters { get; set; }
    public int? ParameterId { get; set; }
    public DateTime StartDate { get; set; } // En attendant, les nullables ne sont pas acceptés pour les dates
    public DateTime EndDate { get; set; }   // En attendant, les nullables ne sont pas acceptés pour les dates

    protected override async Task OnInitAsync()
    {
        Parameters = await ParameterService.GetParametersAsync();
    }

    public void ResetFilters()
    {
        Search(null, null, null);
    }

    [Parameter] public Func<int?, DateTime?, DateTime?, Task> OnSearchAsked { get; private set; }
    public void Search()
    {
        /* Début : Sinon la grid Syncfusion n'est pas rafraichie */
        Search(null, null, null);
        /* Fin : Sinon la grid Syncfusion n'est pas rafraichie */

        Search(this.ParameterId,
            NullableDateTimeConverter.ConvertToNullableDateTime(this.StartDate),
            NullableDateTimeConverter.ConvertToNullableDateTime(this.EndDate));
    }

    private void Search(int? parameterId, DateTime? startDate, DateTime? endDate)
    {
        OnSearchAsked?.Invoke(parameterId, startDate, endDate);
    }
}

