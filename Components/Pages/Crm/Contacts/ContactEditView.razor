@inherits EditablePageComponentBase
@page "/contact/add"
@page "/contact/edit/{IdAsString}"
@using BlazorTests.Components.Shared.Core
@inject ContactService ContactService
@inject ReferenceService ReferenceService

<EditablePageComponentWrapper Title="@Title" SaveAction="@(() => Save())" CancelAction="@(() => Cancel())">


    <EditForm Model="@this" OnValidSubmit="@Save">
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Nom :</label>
                    <InputText Class="col-md-4 col-12" bind-Value="@LastName" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Prénom :</label>
                    <InputText Class="col-md-4 col-12" bind-Value="@FirstName" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="form-group">
                    <label class="col-md-2 col-12">Civilité :</label>
                    @*Pas de cadre rouge autour du controle en cas d'erreur*@
                    <select class="col-md-4 col-12 custom-select" bind="@CivilityId">
                        <option value=null></option>
                        @foreach (var civility in Civilities)
                        {
                            <option value=@civility.Id>@civility.Text</option>
                        }
                    </select>

                    @*Passe tout debout lors de la validation des champs obligatoires*@
                    @*<InputSelect class="col-md-4 col-12 custom-select" bind-Value="@CivilityId">
                        <option value=""></option>
                        @foreach (var civility in Civilities)
                        {
                            <option value="@civility.Id">@civility.Text</option>
                        }
                    </InputSelect>*@
                </div>
            </div>
        </div>

        @*<DataAnnotationsValidator />
        <ValidationSummary />*@
    </EditForm>

    @functions {

        // La validation des champs obligatoires ne peut pas se faire sur les entités directement car :
        // * l'id est obligatoire mais on ne peut pas placer un attribut Required (alors qu'il est obligatoire) sur ce champ car il est généré
        // * Si l'entitié est renseignée via 2 écrans, il faut 1 "modèle" par écran, chaque modèle ayant les attributs correspondant aux champs obligatoires de l'écran.
        // Du coup, il me semble mieux de reproduire la même chose qu'en WPF à savoir des propriétés propres à l'écran
        [RequiredEx("Nom")]
        public string LastName { get; set; }
        [RequiredEx("Prénom")]
        public string FirstName { get; set; }
        [RequiredEx("Civilité")]
        public int? CivilityId { get; set; }

        IList<BlazorTests.Data.CivilityEntity> Civilities { get; set; }

        protected override async Task OnInitAsync()
        {
            this.Civilities = await ReferenceService.GetCivilityEntities();

            if (this.Id.HasValue == false)
            {
                this.Title = "Nouveau contact";
            }
            else
            {
                this.Title = "Modifier un contact";
                var contactEntity = await ContactService.GetContactEntity(this.Id.Value);
                this.LastName = contactEntity.LastName;
                this.FirstName = contactEntity.FirstName;
                this.CivilityId = contactEntity.CivilityId;
            }
        }

        protected override async Task OnSave()
        {
            var contact = new ContactEntity();
            contact.LastName = this.LastName;
            contact.FirstName = this.FirstName;
            contact.CivilityId = this.CivilityId;

            if (this.Id.HasValue == false)
            {
                await ContactService.AddContact(contact);
                this.Id = contact.Id;
            }
            else
            {
                contact.Id = this.Id.Value;
                await ContactService.UpdateContact(contact);
            }

            // On redirige vers la vue complète d'un contact
            UriHelper.NavigateTo(Urls.ContactEditFull + Id);
        }

        protected override async Task OnCancel()
        {
            await ReturnToCallerPage();
        }
    }

</EditablePageComponentWrapper>