@page "/parameter/list"
@using BlazorTests.Models
@using BlazorTests.Helpers

@inject BlazorTests.Services.ParameterService ParameterService
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.Services.IUriHelper UriHelper

<h1>Liste des paramètres </h1>

@if (@Parameters == null)
{
    <p><em>Chargement en cours ...</em></p>
}
else
{
    <div class="form-group row">
        <div class="col-md-6 col-12">
            <table class="table table-sm table-bordered table-striped table-hover">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Libellé</th>
                        <th>
                            <button type="button" class="btn btn-outline btn-xs gridColumnButton" onclick="@(() => AddParameter())">
                                <span class="oi oi-plus" aria-hidden="true"></span>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var parameter in Parameters)
                    {
                        <tr>
                            <td class="autoSizeToContent">@parameter.Id</td>
                            <td>@parameter.Text</td>
                            <td class="autoSizeToContent">
                                <button type="button" class="btn btn-outline-success btn-xs gridColumnButton" onclick="@(() => EditParameter(@parameter.Id))">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </button>
                                <DeleteButton DeleteAction="@(() => DeleteParameter(@parameter.Id))"></DeleteButton>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <button class="btn btn-secondary" onclick="@Close">Fermer</button>
}

@functions {

    public IList<BlazorTests.Models.Parameter> Parameters { get; set; }

    protected override async Task OnInitAsync()
    {
        Parameters = await ParameterService.GetParametersAsync();
    }

    public void AddParameter()
    {
        UriHelper.NavigateTo("/parameter/edit");
    }

    public void EditParameter(string parameterId)
    {
        UriHelper.NavigateTo("/parameter/edit");
    }

    public void DeleteParameter(string parameterId)
    {
        ParameterService.DeleteParameter(parameterId);
        this.StateHasChanged();
    }

    public void Close()
    {
        JavascriptFunctions.ReturnToCallerPage(JSRuntime);
    }
}

